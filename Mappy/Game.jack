class Game {
  field boolean done;
  
  field Array entities;
  field int entitiesLen;
  field Entity entity; // keep track of current entity in the loop

  constructor Game new () {
    let done = false;
    let entitiesLen = 1; // update manually as entities are added. blah.
    let entities = Array.new(entitiesLen); 
    return this;
  }
  
  method void run () {
    //region declarations
    var Entity mappy;
    //endregion declarations
    
    //region boring initialization
    //endregion boring initialization

    let mappy = createMappy();
    let entities[0] = mappy;

    // RUN LOOP
    while (~done) {
      do handleMappyInput(mappy);
      do drawLevel();
      do drawEntities();
      do Sys.wait(30);
    }

    // todo: DISPOSE!
    
    return;
  }

  /* from mario
      1. timer.update
        1. draws level
        2. level.update()
          1. entity.update()
            1. this.traits.forEach(trait => trait.update(this, deltaTime));
              - traits include: velocity, go, jump
          2. updates entity X position
          3. checks X collisions (tile)
          4. updates entity Y position
          5. checks Y collisions (tile)
        3. correcty mario's MINIMUM X position
        (4. moves camera)
        5. applies gravity to mario's y-vel
      */

  method void drawEntities() {
    var int counter;
    let counter = 0;
    while (counter < entitiesLen) {
      let entity = entities[counter];
      let counter = counter + 1;

      // MJS: entity.update(): this.traits.forEach(trait => trait.update(this));
      // do entity.update(this);

      // MJS: entity.pos.x += entity.vel.x * deltaTime;
      do entity.set_x_pos(
        entity.get_x_pos() + entity.get_x_vel()
      );
      // MJS: this.tileCollider.checkX(entity);

      // MJS: entity.pos.y += entity.vel.y * deltaTime;
      do entity.set_y_pos(
        entity.get_y_pos() + entity.get_y_vel()
      );
      // MJS: this.tileCollider.checkY(entity);

      // MJS: mario.vel.y += level.gravity / 100;
      do entity.set_y_vel(
        entity.get_y_vel() + U.GRAVITY()
      );

      do entity.draw(true);
    }    
    return;
  }
  method void drawLevel() {
    // ERASE SCREEN
    do Screen.setColor(false);
    do Screen.drawRectangle(0, 0, U.WIDTH()-1, U.HEIGHT()-1);
    return;
  }
  
  method void handleMappyInput(Entity mappy) {
    var char currentKey;
      
    let currentKey = Keyboard.keyPressed();
    if (currentKey = 130) { do mappy.set_x_vel(-2); } // LEFT
    if (currentKey = 132) { do mappy.set_x_vel(2); } // RIGHT
    if (currentKey = 0) { do mappy.set_x_vel(0); } // RIGHT

    return;
  }

  method Entity createMappy () {
    var Entity mappy;
    let mappy = Entity.new(
      "mappy", // name
      20, // x
      20, // y
      0, // baseVel
      32, // HEIGHT
      32  // WIDTH
    );

    return mappy;
  }
}