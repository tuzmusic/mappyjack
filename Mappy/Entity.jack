class Entity {
  //region FIELDS
  field Vec2 velocity;
  field Vec2 baseVelocity;
  field Vec2 position;
  field int height;
  field int width;
  field string name;
  field boolean firstDraw; 
  // endregion FIELDS
  
  //region ACCESSORS
  method string get_name() { return name; }

  method Vec2 get_velocity() { return velocity; }
  method int get_x_vel() { return velocity.x(); }
  method int get_y_vel() { return velocity.y(); }
  method void set_x_vel(int val) { do velocity.set_x(val); return; }
  method void set_y_vel(int val) { do velocity.set_y(val); return; }
  
  method Vec2 get_position() { return position; }
  method int get_x_pos() { return position.x(); }
  method int get_y_pos() { return position.y(); }
  method void set_x_pos(int val) { do position.set_x(val); return; }
  method void set_y_pos(int val) { do position.set_y(val); return; }
  method void add_to_x_pos(int val) { do position.set_x(position.x() + val); return; }
  method void add_to_y_pos(int val) { do position.set_y(position.y() + val); return; }
  //endregion ACCESSORS
  
  method void update (Game level) {
    // no need to redraw if we're in the same place, as long as we've been drawn ever
    if (firstDraw & (velocity.x() = 0) & (velocity.y() = 0)) { return; }
    // indicate that we've been drawn
    let firstDraw = true;

    // erase (at prev position)
    do draw(false); 

    // UPDATE POSITION
    do position.set_x(position.x() + velocity.x());
    // todo: CHECK X COLLISION

    do position.set_y(position.y() + velocity.y());
    // todo: CHECK Y COLLISION

    // obey gravity
    do set_y_vel(velocity.y() + level.get_gravity());
    
    // redraw
    do draw(true);
    return;
  }
  
  // todo: this definitely needs to be customizable per entity!
  method void draw (boolean color) {
    do drawRectEntity(color);
    return;
  }
  
  constructor Entity new (string _name, int startX, int startY, int _baseVel, int _height, int _width) {
    let name = _name;
    let baseVelocity = _baseVel;
    let velocity = Vec2.new(baseVelocity, baseVelocity);
    let position = Vec2.new(startX, startY);
    let height = _height;
    let width = _width;
    let firstDraw = false;

    return this;
  }

  method void drawRectEntity(boolean color) {
    // pass false to erase previous drawing
    do Screen.setColor(color);

    // draw outer rectangle
    do Screen.drawRectangle(
      position.x(), 
      position.y(),
      position.x() + width, 
      position.y() + height
    );

    // if we're erasing we don't need to worry about the inner shapes
    if (~color) { return; } 

    // draw inner (white) rectangle
    do Screen.setColor(false);
    do Screen.drawRectangle(
      position.x() + 5, 
      position.y() + 5, 
      position.x() + width - 5, 
      position.y() + height - 5
    );

    return;
  }
}