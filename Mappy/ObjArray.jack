class ObjArray {
  field Array arr;
  field int len;

  /** Returns the element at the given index */
  method Array at (int index) { return arr[index]; }  
  
  /** Returns the length of the array */
  method int length() { return len; }

  /** Print the length of the array, with a label */
  method void printLen() { 
    do Output.printString("array length = ");
    do U.printIntLn(length()); return; 
  }

  /** Remove and return the last element in the array. */
  method Array pop() {
    var Array last;
    let last = arr[len - 1];
    let len = len - 1;
    do recreate();
    return last;
  }

  /** Disposes and erases element at given index, 
  without changing the length or structure of the 
  array and the remaining elements. */
  method void eraseAt(int removalIndex) { 
    var Array obj;
    let obj = arr[removalIndex];
    do obj.dispose(); 
    let arr[removalIndex] = null; 
    return;
  }

  /** PRIVATE */
  method void recreate () {
    // prepare the new array
    var Array newArray;
    var int i;

    // Array size must be positive (not zero) or we'll crash
    if (len = 0) { return; }

    let newArray = Array.new(len);
    let i = 0;

    // populate the new array.
    /** on first push, newArray is allocated for 1 element
    arr[0] is null. newArray[0] = arr[0] = null is FINE. */
    while (i < len) {
      let newArray[i] = arr[i];
      let i = i + 1;
    }

    // store the temp array in our member variable
    let arr = newArray;
    return;
  } 

  /** Adds an element to the end of the array */
  method void push (Array obj) {
    // track length
    let len = len + 1; 

    // recreate the array with the new length,
    // which leaves an empty slot at the end
    do recreate();

    // add new item (in that empty slot)
    let arr[len - 1] = obj;
    return;
  }

  constructor ObjArray new () {
    let len = 0;
    return this;
  }
}